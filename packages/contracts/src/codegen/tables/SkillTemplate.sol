// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

// Import user types
import { SkillType, TargetType } from "./../Types.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("SkillTemplate")));
bytes32 constant SkillTemplateTableId = _tableId;

struct SkillTemplateData {
  uint8 requiredLevel;
  SkillType skillType;
  bool withAttack;
  bool withSpell;
  uint32 cost;
  TargetType targetType;
}

library SkillTemplate {
  /** Get the table's schema */
  function getSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](6);
    _schema[0] = SchemaType.UINT8;
    _schema[1] = SchemaType.UINT8;
    _schema[2] = SchemaType.BOOL;
    _schema[3] = SchemaType.BOOL;
    _schema[4] = SchemaType.UINT32;
    _schema[5] = SchemaType.UINT8;

    return SchemaLib.encode(_schema);
  }

  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's metadata */
  function getMetadata() internal pure returns (string memory, string[] memory) {
    string[] memory _fieldNames = new string[](6);
    _fieldNames[0] = "requiredLevel";
    _fieldNames[1] = "skillType";
    _fieldNames[2] = "withAttack";
    _fieldNames[3] = "withSpell";
    _fieldNames[4] = "cost";
    _fieldNames[5] = "targetType";
    return ("SkillTemplate", _fieldNames);
  }

  /** Register the table's schema */
  function registerSchema() internal {
    StoreSwitch.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Register the table's schema (using the specified store) */
  function registerSchema(IStore _store) internal {
    _store.registerSchema(_tableId, getSchema(), getKeySchema());
  }

  /** Set the table's metadata */
  function setMetadata() internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    StoreSwitch.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Set the table's metadata (using the specified store) */
  function setMetadata(IStore _store) internal {
    (string memory _tableName, string[] memory _fieldNames) = getMetadata();
    _store.setMetadata(_tableId, _tableName, _fieldNames);
  }

  /** Get requiredLevel */
  function getRequiredLevel(bytes32 entity) internal view returns (uint8 requiredLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get requiredLevel (using the specified store) */
  function getRequiredLevel(IStore _store, bytes32 entity) internal view returns (uint8 requiredLevel) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0);
    return (uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set requiredLevel */
  function setRequiredLevel(bytes32 entity, uint8 requiredLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((requiredLevel)));
  }

  /** Set requiredLevel (using the specified store) */
  function setRequiredLevel(IStore _store, bytes32 entity, uint8 requiredLevel) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((requiredLevel)));
  }

  /** Get skillType */
  function getSkillType(bytes32 entity) internal view returns (SkillType skillType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1);
    return SkillType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get skillType (using the specified store) */
  function getSkillType(IStore _store, bytes32 entity) internal view returns (SkillType skillType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1);
    return SkillType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set skillType */
  function setSkillType(bytes32 entity, SkillType skillType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(skillType)));
  }

  /** Set skillType (using the specified store) */
  function setSkillType(IStore _store, bytes32 entity, SkillType skillType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked(uint8(skillType)));
  }

  /** Get withAttack */
  function getWithAttack(bytes32 entity) internal view returns (bool withAttack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get withAttack (using the specified store) */
  function getWithAttack(IStore _store, bytes32 entity) internal view returns (bool withAttack) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set withAttack */
  function setWithAttack(bytes32 entity, bool withAttack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 2, abi.encodePacked((withAttack)));
  }

  /** Set withAttack (using the specified store) */
  function setWithAttack(IStore _store, bytes32 entity, bool withAttack) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 2, abi.encodePacked((withAttack)));
  }

  /** Get withSpell */
  function getWithSpell(bytes32 entity) internal view returns (bool withSpell) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Get withSpell (using the specified store) */
  function getWithSpell(IStore _store, bytes32 entity) internal view returns (bool withSpell) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 3);
    return (_toBool(uint8(Bytes.slice1(_blob, 0))));
  }

  /** Set withSpell */
  function setWithSpell(bytes32 entity, bool withSpell) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 3, abi.encodePacked((withSpell)));
  }

  /** Set withSpell (using the specified store) */
  function setWithSpell(IStore _store, bytes32 entity, bool withSpell) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 3, abi.encodePacked((withSpell)));
  }

  /** Get cost */
  function getCost(bytes32 entity) internal view returns (uint32 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Get cost (using the specified store) */
  function getCost(IStore _store, bytes32 entity) internal view returns (uint32 cost) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 4);
    return (uint32(Bytes.slice4(_blob, 0)));
  }

  /** Set cost */
  function setCost(bytes32 entity, uint32 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 4, abi.encodePacked((cost)));
  }

  /** Set cost (using the specified store) */
  function setCost(IStore _store, bytes32 entity, uint32 cost) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 4, abi.encodePacked((cost)));
  }

  /** Get targetType */
  function getTargetType(bytes32 entity) internal view returns (TargetType targetType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 5);
    return TargetType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Get targetType (using the specified store) */
  function getTargetType(IStore _store, bytes32 entity) internal view returns (TargetType targetType) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 5);
    return TargetType(uint8(Bytes.slice1(_blob, 0)));
  }

  /** Set targetType */
  function setTargetType(bytes32 entity, TargetType targetType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(targetType)));
  }

  /** Set targetType (using the specified store) */
  function setTargetType(IStore _store, bytes32 entity, TargetType targetType) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setField(_tableId, _keyTuple, 5, abi.encodePacked(uint8(targetType)));
  }

  /** Get the full data */
  function get(bytes32 entity) internal view returns (SkillTemplateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 entity) internal view returns (SkillTemplateData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(
    bytes32 entity,
    uint8 requiredLevel,
    SkillType skillType,
    bool withAttack,
    bool withSpell,
    uint32 cost,
    TargetType targetType
  ) internal {
    bytes memory _data = encode(requiredLevel, skillType, withAttack, withSpell, cost, targetType);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using individual values (using the specified store) */
  function set(
    IStore _store,
    bytes32 entity,
    uint8 requiredLevel,
    SkillType skillType,
    bool withAttack,
    bool withSpell,
    uint32 cost,
    TargetType targetType
  ) internal {
    bytes memory _data = encode(requiredLevel, skillType, withAttack, withSpell, cost, targetType);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.setRecord(_tableId, _keyTuple, _data);
  }

  /** Set the full data using the data struct */
  function set(bytes32 entity, SkillTemplateData memory _table) internal {
    set(
      entity,
      _table.requiredLevel,
      _table.skillType,
      _table.withAttack,
      _table.withSpell,
      _table.cost,
      _table.targetType
    );
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 entity, SkillTemplateData memory _table) internal {
    set(
      _store,
      entity,
      _table.requiredLevel,
      _table.skillType,
      _table.withAttack,
      _table.withSpell,
      _table.cost,
      _table.targetType
    );
  }

  /** Decode the tightly packed blob using this table's schema */
  function decode(bytes memory _blob) internal pure returns (SkillTemplateData memory _table) {
    _table.requiredLevel = (uint8(Bytes.slice1(_blob, 0)));

    _table.skillType = SkillType(uint8(Bytes.slice1(_blob, 1)));

    _table.withAttack = (_toBool(uint8(Bytes.slice1(_blob, 2))));

    _table.withSpell = (_toBool(uint8(Bytes.slice1(_blob, 3))));

    _table.cost = (uint32(Bytes.slice4(_blob, 4)));

    _table.targetType = TargetType(uint8(Bytes.slice1(_blob, 8)));
  }

  /** Tightly pack full data using this table's schema */
  function encode(
    uint8 requiredLevel,
    SkillType skillType,
    bool withAttack,
    bool withSpell,
    uint32 cost,
    TargetType targetType
  ) internal view returns (bytes memory) {
    return abi.encodePacked(requiredLevel, skillType, withAttack, withSpell, cost, targetType);
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 entity) internal pure returns (bytes32[] memory _keyTuple) {
    _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 entity) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = bytes32((entity));

    _store.deleteRecord(_tableId, _keyTuple);
  }
}

function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
