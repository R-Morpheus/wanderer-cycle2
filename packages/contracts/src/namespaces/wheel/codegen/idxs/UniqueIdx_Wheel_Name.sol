// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";

// Import idx internals
import { Uint8Map, Uint8MapLib } from "@dk1a/mud-table-idxs/src/Uint8Map.sol";
import { hashIndexes, hashValues } from "@dk1a/mud-table-idxs/src/utils.sol";

import { IIdxErrors } from "@dk1a/mud-table-idxs/src/IIdxErrors.sol";

import { registerUniqueIdx } from "@dk1a/mud-table-idxs/src/namespaces/uniqueIdx/registerUniqueIdx.sol";
import { UniqueIdx } from "@dk1a/mud-table-idxs/src/namespaces/uniqueIdx/codegen/tables/UniqueIdx.sol";

library UniqueIdx_Wheel_Name {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "wheel", name: "Wheel", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462776865656c000000000000000000576865656c0000000000000000000000);

  uint256 constant _keyNumber = 0;
  uint256 constant _fieldNumber = 1;

  Uint8Map constant _keyIndexes = Uint8Map.wrap(0x0000000000000000000000000000000000000000000000000000000000000000);
  Uint8Map constant _fieldIndexes = Uint8Map.wrap(0x0103000000000000000000000000000000000000000000000000000000000000);

  bytes32 constant _indexesHash = 0xee0abce256458c50692876afe42deb439b5043ae0d13a3ffc3a18b267477c926;

  function valuesHash(string memory name) internal pure returns (bytes32) {
    bytes32[] memory _partialKeyTuple = new bytes32[](_keyNumber);

    bytes[] memory _partialValues = new bytes[](_fieldNumber);

    _partialValues[0] = bytes((name));

    return hashValues(_partialKeyTuple, _partialValues);
  }

  // Should be called once in e.g. PostDeploy
  function register() internal {
    registerUniqueIdx(_tableId, _keyIndexes, _fieldIndexes);
  }

  function has(string memory name) internal view returns (bool) {
    bytes32 _valuesHash = valuesHash(name);

    return UniqueIdx.length(_tableId, _indexesHash, _valuesHash) > 0;
  }

  function getKeyTuple(string memory name) internal view returns (bytes32[] memory _keyTuple) {
    bytes32 _valuesHash = valuesHash(name);

    _keyTuple = UniqueIdx.get(_tableId, _indexesHash, _valuesHash);

    if (_keyTuple.length == 0) {
      revert IIdxErrors.UniqueIdx_InvalidGet({
        tableId: _tableId,
        libraryName: "UniqueIdx_Wheel_Name",
        valuesBlob: abi.encodePacked(name),
        indexesHash: _indexesHash,
        valuesHash: _valuesHash
      });
    }
  }

  function get(string memory name) internal view returns (bytes32 entity) {
    bytes32[] memory _keyTuple = getKeyTuple(name);

    entity = _keyTuple[0];
  }

  /**
   * @notice Decode keys from a bytes32 array using the source table's field layout.
   */
  function decodeKeyTuple(bytes32[] memory _keyTuple) internal pure returns (bytes32 entity) {
    entity = _keyTuple[0];
  }
}

/**
 * @notice Cast a value to a bool.
 * @dev Boolean values are encoded as uint8 (1 = true, 0 = false), but Solidity doesn't allow casting between uint8 and bool.
 * @param value The uint8 value to convert.
 * @return result The boolean value.
 */
function _toBool(uint8 value) pure returns (bool result) {
  assembly {
    result := value
  }
}
