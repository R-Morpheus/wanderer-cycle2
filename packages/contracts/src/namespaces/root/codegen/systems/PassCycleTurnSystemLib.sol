// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

import { PassCycleTurnSystem } from "../../cycle/PassCycleTurnSystem.sol";
import { revertWithBytes } from "@latticexyz/world/src/revertWithBytes.sol";
import { IWorldCall } from "@latticexyz/world/src/IWorldKernel.sol";
import { SystemCall } from "@latticexyz/world/src/SystemCall.sol";
import { WorldContextConsumerLib } from "@latticexyz/world/src/WorldContext.sol";
import { Systems } from "@latticexyz/world/src/codegen/tables/Systems.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";

type PassCycleTurnSystemType is bytes32;

// equivalent to WorldResourceIdLib.encode({ typeId: RESOURCE_SYSTEM, namespace: "", name: "PassCycleTurnSys" }))
PassCycleTurnSystemType constant passCycleTurnSystem = PassCycleTurnSystemType.wrap(
  0x73790000000000000000000000000000506173734379636c655475726e537973
);

struct CallWrapper {
  ResourceId systemId;
  address from;
}

struct RootCallWrapper {
  ResourceId systemId;
  address from;
}

/**
 * @title PassCycleTurnSystemLib
 * @author MUD (https://mud.dev) by Lattice (https://lattice.xyz)
 * @dev This library is automatically generated from the corresponding system contract. Do not edit manually.
 */
library PassCycleTurnSystemLib {
  error PassCycleTurnSystemLib_CallingFromRootSystem();

  function passCycleTurn(PassCycleTurnSystemType self, bytes32 wandererEntity) internal {
    return CallWrapper(self.toResourceId(), address(0)).passCycleTurn(wandererEntity);
  }

  function passCycleTurn(CallWrapper memory self, bytes32 wandererEntity) internal {
    // if the contract calling this function is a root system, it should use `callAsRoot`
    if (address(_world()) == address(this)) revert PassCycleTurnSystemLib_CallingFromRootSystem();

    bytes memory systemCall = abi.encodeCall(_passCycleTurn_bytes32.passCycleTurn, (wandererEntity));
    self.from == address(0)
      ? _world().call(self.systemId, systemCall)
      : _world().callFrom(self.from, self.systemId, systemCall);
  }

  function passCycleTurn(RootCallWrapper memory self, bytes32 wandererEntity) internal {
    bytes memory systemCall = abi.encodeCall(_passCycleTurn_bytes32.passCycleTurn, (wandererEntity));
    SystemCall.callWithHooksOrRevert(self.from, self.systemId, systemCall, msg.value);
  }

  function callFrom(PassCycleTurnSystemType self, address from) internal pure returns (CallWrapper memory) {
    return CallWrapper(self.toResourceId(), from);
  }

  function callAsRoot(PassCycleTurnSystemType self) internal view returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), WorldContextConsumerLib._msgSender());
  }

  function callAsRootFrom(PassCycleTurnSystemType self, address from) internal pure returns (RootCallWrapper memory) {
    return RootCallWrapper(self.toResourceId(), from);
  }

  function toResourceId(PassCycleTurnSystemType self) internal pure returns (ResourceId) {
    return ResourceId.wrap(PassCycleTurnSystemType.unwrap(self));
  }

  function fromResourceId(ResourceId resourceId) internal pure returns (PassCycleTurnSystemType) {
    return PassCycleTurnSystemType.wrap(resourceId.unwrap());
  }

  function getAddress(PassCycleTurnSystemType self) internal view returns (address) {
    return Systems.getSystem(self.toResourceId());
  }

  function _world() private view returns (IWorldCall) {
    return IWorldCall(StoreSwitch.getStoreAddress());
  }
}

/**
 * System Function Interfaces
 *
 * We generate an interface for each system function, which is then used for encoding system calls.
 * This is necessary to handle function overloading correctly (which abi.encodeCall cannot).
 *
 * Each interface is uniquely named based on the function name and parameters to prevent collisions.
 */

interface _passCycleTurn_bytes32 {
  function passCycleTurn(bytes32 wandererEntity) external;
}

using PassCycleTurnSystemLib for PassCycleTurnSystemType global;
using PassCycleTurnSystemLib for CallWrapper global;
using PassCycleTurnSystemLib for RootCallWrapper global;
